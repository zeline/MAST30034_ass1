# create an empty vector
tc <- c()
for(i in 1:6){
start = c(rep(NA, AV[i]))
period = c(rep(1, DUR_ONES[i]), rep(-1, DUR_NEG[i]))
n = length(c(start, period))
branch = rep_len(period, N-n)
tc[i] = c(start, period, branch)
}
return(tc)
}
TC <- matrix(, nrow = 240, ncol = 6)
tc
TC[1:length(vector), i] = vec
for(i in 1:6){
start = c(rep(NA, AV[i]))
period = c(rep(1, DUR_ONES[i]), rep(-1, DUR_NEG[i]))
n = length(c(start, period))
branch = rep_len(period, N-n)
vec = c(start, period, branch)
TC[1:length(vector), i] = vec
}
TC
TC[,1]
for(i in 1:6){
start = c(rep(NA, AV[i]))
period = c(rep(1, DUR_ONES[i]), rep(-1, DUR_NEG[i]))
n = length(c(start, period))
branch = rep_len(period, N-n)
vec = c(start, period, branch)
TC[1:length(vector), i] <- vec
}
TC <- matrix(data = NA, nrow = 240, ncol = 6)
for(i in 1:6){
start = c(rep(NA, AV[i]))
period = c(rep(1, DUR_ONES[i]), rep(-1, DUR_NEG[i]))
n = length(c(start, period))
branch = rep_len(period, N-n)
vec = c(start, period, branch)
TC[1:length(vector), i] <- vec
}
TC[,1]
tc1
TC[,1] <- tc1
TC
#col 2
start = c(rep(NA, AV[2]))
period = c(rep(1, DUR_ONES[2]), rep(-1, DUR_NEG[2]))
n = length(c(start, period))
branch = rep_len(period, N-n)
tc2 = c(start, period, branch)
TC[,2] <- tc2
TC
TC <- matrix(data = NA, nrow = 240, ncol = 6)
for(i in 1:6){
start = c(rep(NA, AV[i]))
period = c(rep(1, DUR_ONES[i]), rep(-1, DUR_NEG[i]))
n = length(c(start, period))
branch = rep_len(period, N-n)
vec = c(start, period, branch)
TC[, i] <- vec
}
TC
?matplot
TC[,1]
matplot(TC[,1])
matplot(TC[,1], type = 'l')
matplot(TC[,1], type = 'l', xlab = 'Time', title = 'Time Course 1')
matplot(TC[,1], type = 'l', xlab = 'Time', ylab = 'Time Course 1')
?scale
scaled_TC = scale(TC, center = TRUE, scale = TRUE)
scaled_TC
mean(scaled_TC[,3])
#now we need to standardise each column
scaled_TC <- matrix(data = NA, nrow = 240, ncol = 6)
for(i in 1:6){
scaled_col = (TC[,i] - mean(TC[,i])) / sd(TC[,i])
scaled_TC[,i] = scaled_col
}
scaled_TC
?mean
#now we need to standardise each column
scaled_TC <- matrix(data = NA, nrow = 240, ncol = 6)
for(i in 1:6){
scaled_col = (TC[,i] - mean(TC[,i], na.rm = TRUE)) / sd(TC[,i], na.rm = TRUE)
scaled_TC[,i] = scaled_col
}
scaled_TC
mean(scaled_TC)
?apply
applt(scaled_TC, 2, mean)
apply(scaled_TC, 2, mean)
apply(scaled_TC, 2, mean(na.rm = TRUE))
apply(scaled_TC, 2, mean, na.rm=TRUE)
apply(scaled_TC, 2, sd, na.rm=TRUE)
matplot(scaled_TC[,1], type = 'l', xlab = 'Time', ylab = 'Time Course 1')
#now we make the subplots
scaled_TC
matplot(scaled_TC[,2], type = 'l', xlab = 'Time', ylab = 'Time Course 1')
?ggplot
??ggplot
?par
par(mfrow=c(2,3))
matplot(scaled_TC[,1], type = 'l', xlab = 'Time', ylab = 'Time Course 1')
matplot(scaled_TC[,2], type = 'l', xlab = 'Time', ylab = 'Time Course 2')
matplot(scaled_TC[,3], type = 'l', xlab = 'Time', ylab = 'Time Course 3')
matplot(scaled_TC[,4], type = 'l', xlab = 'Time', ylab = 'Time Course 4')
matplot(scaled_TC[,5], type = 'l', xlab = 'Time', ylab = 'Time Course 5')
matplot(scaled_TC[,6], type = 'l', xlab = 'Time', ylab = 'Time Course 6')
par(mfrow=c(3,2))
matplot(scaled_TC[,1], type = 'l', xlab = 'Time', ylab = 'Time Course 1')
matplot(scaled_TC[,2], type = 'l', xlab = 'Time', ylab = 'Time Course 2')
matplot(scaled_TC[,3], type = 'l', xlab = 'Time', ylab = 'Time Course 3')
matplot(scaled_TC[,4], type = 'l', xlab = 'Time', ylab = 'Time Course 4')
matplot(scaled_TC[,5], type = 'l', xlab = 'Time', ylab = 'Time Course 5')
matplot(scaled_TC[,6], type = 'l', xlab = 'Time', ylab = 'Time Course 6')
matplot(TC[,1], type = 'l', xlab = 'Time', main = 'Time Course 1')
par(mfrow=c(2,3))
matplot(scaled_TC[,1], type = 'l', xlab = 'Time', main = 'Time Course 1')
matplot(scaled_TC[,2], type = 'l', xlab = 'Time', main = 'Time Course 2')
matplot(scaled_TC[,3], type = 'l', xlab = 'Time', main = 'Time Course 3')
matplot(scaled_TC[,4], type = 'l', xlab = 'Time', main = 'Time Course 4')
matplot(scaled_TC[,5], type = 'l', xlab = 'Time', main = 'Time Course 5')
matplot(scaled_TC[,6], type = 'l', xlab = 'Time', main = 'Time Course 6')
par(mfrow=c(2,3))
matplot(scaled_TC[,1], type = 'l', xlab = 'Time', ylab = 'Source Value',
main = 'Time Course 1')
matplot(scaled_TC[,2], type = 'l', xlab = 'Time', ylab = 'Source Value',
main = 'Time Course 2')
matplot(scaled_TC[,3], type = 'l', xlab = 'Time', ylab = 'Source Value',
main = 'Time Course 3')
matplot(scaled_TC[,4], type = 'l', xlab = 'Time', ylab = 'Source Value',
main = 'Time Course 4')
matplot(scaled_TC[,5], type = 'l', xlab = 'Time', ylab = 'Source Value',
main = 'Time Course 5')
matplot(scaled_TC[,6], type = 'l', xlab = 'Time', ylab = 'Source Value',
main = 'Time Course 6')
par(mfrow=c(3,2))
matplot(scaled_TC[,1], type = 'l', xlab = 'Time', ylab = 'Source Value',
main = 'Time Course 1')
matplot(scaled_TC[,2], type = 'l', xlab = 'Time', ylab = 'Source Value',
main = 'Time Course 2')
matplot(scaled_TC[,3], type = 'l', xlab = 'Time', ylab = 'Source Value',
main = 'Time Course 3')
matplot(scaled_TC[,4], type = 'l', xlab = 'Time', ylab = 'Source Value',
main = 'Time Course 4')
matplot(scaled_TC[,5], type = 'l', xlab = 'Time', ylab = 'Source Value',
main = 'Time Course 5')
matplot(scaled_TC[,6], type = 'l', xlab = 'Time', ylab = 'Source Value',
main = 'Time Course 6')
#1.2
TC
#1.2
rcorr(scaled_TC, type= c('pearson', 'spearman') )
#1.2
install.packages("Hmisc")
library(Hmisc)
#1.2
rcorr(scaled_TC, type= c('pearson', 'spearman') )
cor(scaled_TC, method = 'pearson')
cor(scaled_TC, method = 'pearson', na.rm = TRUE)
#1.2
rcorr(scaled_TC, type= c('pearson', 'spearman'))$r
install corrplot()
?corrplot
install corrplot
install.packages('corrplot')
library(corrplot)
#1.2
rcorr(scaled_TC, type= 'spearman')$r
#1.2
corr_matrix = rcorr(scaled_TC, type= 'spearman')$r
colour = colorRampPalette(c('yellow', 'orange', 'red'))(20)
heatmap(x = corr_matrix, col = colour, symm = TRUE)
colour = colorRampPalette(c('red', 'orange', 'yellow'))(20)
heatmap(x = corr_matrix, col = colour, symm = TRUE)
colour = colorRampPalette(c('red', 'orange', 'yellow'))(40)
heatmap(x = corr_matrix, col = colour, symm = TRUE)
#using spearman as the values are not normally distributed
corr_matrix
?colorRampPalette
heatmap(x = corr_matrix, col = colour, symm = TRUE, main = 'Correlation Between
TC Vectors')
legend(x="topright", legend=c("min", "ave", "max"),
fill=colorRampPalette(brewer.pal(8, "Oranges"))(3))
legend(x="topright", col_fun = colour)
heatmap(x = corr_matrix, col = colour, symm = TRUE, main = 'Correlation Between
TC Vectors')
Legend(x="topright", col_fun = colour)
library(circlize)
intall circlize
intall.packages('circlize')
install.packages('circlize')
colour = colorRampPalette(c('red', 'orange', 'yellow'))(40)
heatmap(x = corr_matrix, col = colour, symm = TRUE, main = 'Correlation Between
TC Vectors')
Legend(x="topright", col_fun = colour)
library(circlize)
colour = colorRampPalette(c('red', 'orange', 'yellow'))(40)
heatmap(x = corr_matrix, col = colour, symm = TRUE, main = 'Correlation Between
TC Vectors')
Legend(x="topright", col_fun = colour)
col_fun = colorRamp2(c(-1, 0, 1), c("green", "yellow", "red"))
heatmap(x = corr_matrix, col = col_fun, symm = TRUE, main = 'Correlation Between
TC Vectors')
heatmap(x = corr_matrix, col = colour, symm = TRUE, main = 'Correlation Between
TC Vectors')
install ComplexHeatmap
install.packages('ComplexHeatmap')
#using spearman as the values are not normally distributed
corr_matrix
colour = colorRampPalette(c('purple', 'red', 'orange', 'yellow'))(40)
heatmap(x = corr_matrix, col = colour, symm = TRUE, main = 'Correlation Between
TC Vectors')
colour = colorRampPalette(c('purple', 'red', 'orange', 'yellow'))(80)
heatmap(x = corr_matrix, col = colour, symm = TRUE, main = 'Correlation Between
TC Vectors')
colour = colorRampPalette(c('red', 'orange', 'yellow'))(80)
heatmap(x = corr_matrix, col = colour, symm = TRUE, main = 'Correlation Between
TC Vectors')
legend(x = "bottomright", legend = c("low", "medium", "high"),
cex = 0.8, fill = colour)
?legend
heatmap(x = corr_matrix, col = colour, symm = TRUE, main = 'Correlation Between
TC Vectors')
legend(x = "bottomright", legend = c("low", "medium", "high"),
cex = 0.8, fill = colour(3))
colour = colorRampPalette(c('red', 'orange', 'yellow'))(80)
heatmap(x = corr_matrix, col = colour, symm = TRUE, main = 'Correlation Between
TC Vectors')
legend(x = "bottomright", legend = c("low", "medium", "high"),
cex = 0.8, fill = colour(3))
cex = 0.8, fill = colour
legend(x = "bottomright", legend = c("low", "medium", "high"),
fill = colour)
colour
# Function to plot color bar
color.bar <- function(lut, min, max=-min, nticks=11, ticks=seq(min, max, len=nticks), title='') {
scale = (length(lut)-1)/(max-min)
dev.new(width=1.75, height=5)
plot(c(0,10), c(min,max), type='n', bty='n', xaxt='n', xlab='', yaxt='n', ylab='', main=title)
axis(2, ticks, las=1)
for (i in 1:(length(lut)-1)) {
y = (i-1)/scale + min
rect(0,y,10,y+1/scale, col=lut[i], border=NA)
}
}
color.bar(colorRampPalette(c("light green", "yellow", "orange", "red"))(100), -1)
colour = colorRampPalette(c("light green", "yellow", "orange", "red"))(100)
heatmap = heatmap(x = corr_matrix, col = colour, symm = TRUE, main = 'Correlation Between
TC Vectors')
heatmap = heatmap(x = corr_matrix, col = colour, symm = TRUE, main = 'Correlation Between
TC Vectors', Colv = NA, Rowv = NA)
#using spearman as the values are not normally distributed
min(corr_matrix)
max(corr_matrix)
#since the heatmap will be from [-0.07, 1], there isnt any strong negative
#correlation so I will focus on only displaying the strong positive correlations
colour = colorRampPalette(c("pink", "orange", "yellow"))(100)
heatmap = heatmap(x = corr_matrix, col = colour, symm = TRUE, main = 'Correlation Between
TC Vectors', Colv = NA, Rowv = NA)
#since the heatmap will be from [-0.07, 1], there isnt any strong negative
#correlation so I will focus on only displaying the strong positive correlations
colour = colorRampPalette(c("magenta", "orange", "yellow"))(100)
heatmap = heatmap(x = corr_matrix, col = colour, symm = TRUE, main = 'Correlation Between
TC Vectors', Colv = NA, Rowv = NA)
#since the heatmap will be from [-0.07, 1], there isnt any strong negative
#correlation so I will focus on only displaying the strong positive correlations
colour = colorRampPalette(c("peach", "orange", "yellow"))(100)
#since the heatmap will be from [-0.07, 1], there isnt any strong negative
#correlation so I will focus on only displaying the strong positive correlations
colour = colorRampPalette(c("blue", "green", "yellow"))(100)
heatmap = heatmap(x = corr_matrix, col = colour, symm = TRUE, main = 'Correlation Between
TC Vectors', Colv = NA, Rowv = NA)
#since the heatmap will be from [-0.07, 1], there isnt any strong negative
#correlation so I will focus on only displaying the strong positive correlations
colour = colorRampPalette(c("lightblue", "green", "yellow"))(100)
heatmap = heatmap(x = corr_matrix, col = colour, symm = TRUE, main = 'Correlation Between
TC Vectors', Colv = NA, Rowv = NA)
#since the heatmap will be from [-0.07, 1], there isnt any strong negative
#correlation so I will focus on only displaying the strong positive correlations
colour = colorRampPalette(c("lightblue", "lime", "yellow"))(100)
heatmap = heatmap(x = corr_matrix, col = colour, symm = TRUE, main = 'Correlation Between
TC Vectors', Colv = NA, Rowv = NA)
#since the heatmap will be from [-0.07, 1], there isnt any strong negative
#correlation so I will focus on only displaying the strong positive correlations
colour = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(100)
heatmap = heatmap(x = corr_matrix, col = colour, symm = TRUE, main = 'Correlation Between
TC Vectors', Colv = NA, Rowv = NA)
colour
legend(x = "bottomright", legend = c("low", "medium", "high"),
fill = colour)
#since the heatmap will be from [-0.07, 1], there isnt any strong negative
#correlation so I will focus on only displaying the strong positive correlations
colour = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(100)
heatmap = heatmap(x = corr_matrix, col = colour, symm = TRUE,
main = 'Correlation Between TC Vectors', Colv = NA, Rowv = NA)
legend(x = "bottomright", legend = c("low", "medium", "high"),
fill = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(100))
colour(3)
#since the heatmap will be from [-0.07, 1], there isnt any strong negative
#correlation so I will focus on only displaying the strong positive correlations
colour = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(3)
heatmap = heatmap(x = corr_matrix, col = colour, symm = TRUE,
main = 'Correlation Between TC Vectors', Colv = NA, Rowv = NA)
legend(x = "bottomright", legend = c("low", "medium", "high"),
fill = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(3))
#since the heatmap will be from [-0.07, 1], there isnt any strong negative
#correlation so I will focus on only displaying the strong positive correlations
colour = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(20)
heatmap = heatmap(x = corr_matrix, col = colour, symm = TRUE,
main = 'Correlation Between TC Vectors', Colv = NA, Rowv = NA)
legend(x = "bottomright", legend = c("low", "medium", "high"),
fill = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(20))
#since the heatmap will be from [-0.07, 1], there isnt any strong negative
#correlation so I will focus on only displaying the strong positive correlations
colour = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(10)
heatmap = heatmap(x = corr_matrix, col = colour, symm = TRUE,
main = 'Correlation Between TC Vectors', Colv = NA, Rowv = NA)
legend(x = "bottomright", legend = c("low", "medium", "high"),
fill = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(10))
colorRampPalette(c("lightblue", "lightgreen", "yellow"))(10)
#since the heatmap will be from [-0.07, 1], there isnt any strong negative
#correlation so I will focus on only displaying the strong positive correlations
colour = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(10)
heatmap = heatmap(x = corr_matrix, col = colour, symm = TRUE,
main = 'Correlation Between TC Vectors', Colv = NA, Rowv = NA)
legend(x = "bottomright", legend = c("low", "medium", "high"),
fill = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(3))
legend(x = "bottomright", legend = c("0.0", "0.6", "1.0"),
fill = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(3))
#since the heatmap will be from [-0.07, 1], there isnt any strong negative
#correlation so I will focus on only displaying the strong positive correlations
colour = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(10)
heatmap = heatmap(x = corr_matrix, col = colour, symm = TRUE,
main = 'Correlation Between TC Vectors', Colv = NA, Rowv = NA)
legend(x = "bottomright", legend = c("0.0", "0.6", "1.0"),
fill = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(3))
?legend
#since the heatmap will be from [-0.07, 1], there isnt any strong negative
#correlation so I will focus on only displaying the strong positive correlations
colour = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(20)
heatmap = heatmap(x = corr_matrix, col = colour, symm = TRUE,
main = 'Correlation Between TC Vectors', Colv = NA, Rowv = NA)
legend(x = "bottomright", legend = c("0.0", "0.6", "1.0"),
fill = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(3))
#since the heatmap will be from [-0.07, 1], there isnt any strong negative
#correlation so I will focus on only displaying the strong positive correlations
colour = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(10)
heatmap = heatmap(x = corr_matrix, col = colour, symm = TRUE,
main = 'Correlation Between TC Vectors', Colv = NA, Rowv = NA)
legend(x = "bottomright", legend = c("0.0", "0.6", "1.0"),
fill = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(3))
heatmap = heatmap(x = corr_matrix, col = colour, symm = TRUE,
main = 'Correlation Between TC Vectors', Colv = NA, Rowv = NA)
legend(title = 'Scale for Heatplot', x = "bottomright",
legend = c("0.0", "0.6", "1.0"),
fill = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(3) )
heatmap = heatmap(x = corr_matrix, col = colour, symm = TRUE,
main = 'Correlation Between TC Vectors', Colv = NA, Rowv = NA)
legend(title = 'Scale for Heatplot', x = "right",
legend = c("0.0", "0.6", "1.0"),
fill = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(3) )
heatmap = heatmap(x = corr_matrix, col = colour, symm = TRUE,
main = 'Correlation Between TC Vectors', Colv = NA, Rowv = NA)
legend(x = "right",
legend = c("0.0", "0.6", "1.0"),
fill = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(3) )
legend(title = 'Scale',x = "right",
legend = c("0.0", "0.6", "1.0"),
fill = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(3) )
legend(title = 'Scale',x = "bottom",
legend = c("0.0", "0.6", "1.0"),
fill = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(3) )
heatmap = heatmap(x = corr_matrix, col = colour, symm = TRUE,
main = 'Correlation Between TC Vectors', Colv = NA, Rowv = NA)
legend(title = 'Scale',x = "right",
legend = c("0.0", "0.6", "1.0"),
fill = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(3) )
#exporting the matrix
write.csv(scaled_TC, file = "~/data/scaled_TC.csv")
#exporting the matrix
write.csv(scaled_TC, file = "~Documents/spark/MAST30034_ass1/data/scaled_TC.csv")
wd
setwd("~/Documents/spark/MAST30034_ass1/code")
#exporting the matrix
write.csv(scaled_TC, file = "~/scaled_TC.csv")
#now we make the subplots
scaled_TC
#exporting the matrix
write.csv2(scaled_TC, file = "~/scaled_TC.csv") #NOT WORKING???
#exporting the matrix
write.table(scaled_TC, file = "~/scaled_TC.csv") #NOT WORKING???
#1.3
sm1 = matrix(0, 21, 21)
sm1
sm1[2:6, 2:6]
sm1[2:6, 2:6] <- 1
sm1
sm2 = matrix(0, 21, 21)
sm2[15:19, 2:6] <- 1
sm2
sm3 = matrix(0, 21, 21)
sm3[8:13, 2:6] <- 1
sm3 = matrix(0, 21, 21)
sm3[2:6, 8:13] <- 1
sm4 = matrix(0, 21, 21)
sm4[15:19, 8:13] <- 1
sm5 = matrix(0, 21, 21)
sm5[2:6, 15:19] <- 1
sm6 = matrix(0, 21, 21)
sm6[15:19, 15:19] <- 1
tmpSM <- c(sm1, sm2, sm3, sm4, sm5, sm6)
tmpSM
sm1
type(tmpSM)
typeof(tmpSM)
tmpSM <- array(sm1, sm2, sm3, sm4, sm5, sm6)
?array
tmpSM <- array(c(sm1, sm2, sm3, sm4, sm5, sm6), dim = c(6, 21, 21))
tmpSM
tmpSM[1]
tmpSM[,,1]
tmpSM <- array(c(sm1, sm2, sm3, sm4, sm5, sm6), dim = c(21, 21, 6))
tmpSM[,,1]
for(i in 1:6){
col <- as.vector(tmpSMC[,, i])
SM[, i] <- col
}
for(i in 1:6){
col <- as.vector(tmpSM[,, i])
SM[, i] <- col
}
SM <- matrix(data = NA, nrow = 441, ncol = 6)
for(i in 1:6){
col <- as.vector(tmpSM[,, i])
SM[, i] <- col
}
SM[,1]
tmpSM[,,3]
sm1
SM[,2]
#plotting
par(mfrow=c(3,2))
matplot(tmpSM[,,1], type = 'l', xlab = 'Time', ylab = 'Source Value',
main = 'Time Course 1')
matplot(tmpSM[,,1], type = 'l', xlab = 'Time', ylab = 'Source Value',
main = 'Time Course 2')
matplot(tmpSM[,,1], type = 'l', xlab = 'Time', ylab = 'Source Value',
main = 'Time Course 3')
matplot(tmpSM[,,1], type = 'l', xlab = 'Time', ylab = 'Source Value',
main = 'Time Course 4')
matplot(tmpSM[,,1], type = 'l', xlab = 'Time', ylab = 'Source Value',
main = 'Time Course 5')
matplot(tmpSM[,,1], type = 'l', xlab = 'Time', ylab = 'Source Value',
main = 'Time Course 6')
matplot(tmpSM[,,1], type = 'heatmap', xlab = 'Time', ylab = 'Source Value',
main = 'Time Course 1')
matplot(tmpSM[,,1], type = 'heatmap', xlab = 'Time', ylab = 'Source Value',
main = 'Time Course 1')
colorRampPalette(c("lightblue", 'red'))(2)
heatmap = heatmap(x = tmpSM[,,1], col = colour, symm = TRUE,
main = 'Heatmap SM 1', Colv = NA, Rowv = NA)
legend(title = 'Scale',x = "right",
legend = c("0.0", "0.6", "1.0"),
fill = colorRampPalette(c("lightblue", 'red'))(2) )
colorRampPalette(c("lightblue", 'red'))(2)
heatmap = heatmap(x = tmpSM[,,1], col = colour, symm = TRUE,
main = 'Heatmap SM 1', Colv = NA, Rowv = NA)
legend(title = 'Scale',x = "right",
legend = c("0.0", "1.0"),
fill = colorRampPalette(c("lightblue", 'red'))(2) )
colorRampPalette(c("lightblue", 'red'))(2)
heatmap(x = tmpSM[,,1], col = colour, symm = TRUE,
main = 'Heatmap SM 1', Colv = NA, Rowv = NA)
legend(title = 'Scale',x = "right",
legend = c("0.0", "1.0"),
fill = colorRampPalette(c("lightblue", 'red'))(2) )
par(mfrow=c(3,2))
colorRampPalette(c("lightblue", 'red'))(2)
heatmap(x = tmpSM[,,1], col = colour, symm = TRUE,
main = 'Heatmap SM 1', Colv = NA, Rowv = NA)
heatmap(x = tmpSM[,,2], col = colour, symm = TRUE,
main = 'Heatmap SM 2', Colv = NA, Rowv = NA)
heatmap(x = tmpSM[,,3], col = colour, symm = TRUE,
main = 'Heatmap SM 3', Colv = NA, Rowv = NA)
heatmap(x = tmpSM[,,4], col = colour, symm = TRUE,
main = 'Heatmap SM 4', Colv = NA, Rowv = NA)
heatmap(x = tmpSM[,,5], col = colour, symm = TRUE,
main = 'Heatmap SM 5', Colv = NA, Rowv = NA)
heatmap(x = tmpSM[,,6], col = colour, symm = TRUE,
main = 'Heatmap SM 6', Colv = NA, Rowv = NA)
library(gplots)
install.packages('gplot')
install.packages('ggplots')
?Heatmap
??Heatmap
h1 = heatmap(x = tmpSM[,,1], col = colour, symm = TRUE,
main = 'Heatmap SM 1', Colv = NA, Rowv = NA)
h2 = heatmap(x = tmpSM[,,2], col = colour, symm = TRUE,
main = 'Heatmap SM 2', Colv = NA, Rowv = NA)
h3 = heatmap(x = tmpSM[,,3], col = colour, symm = TRUE,
main = 'Heatmap SM 3', Colv = NA, Rowv = NA)
h4 = heatmap(x = tmpSM[,,4], col = colour, symm = TRUE,
main = 'Heatmap SM 4', Colv = NA, Rowv = NA)
h5 = heatmap(x = tmpSM[,,5], col = colour, symm = TRUE,
main = 'Heatmap SM 5', Colv = NA, Rowv = NA)
h6 = heatmap(x = tmpSM[,,6], col = colour, symm = TRUE,
main = 'Heatmap SM 6', Colv = NA, Rowv = NA)
h1 + h2
install.packages('ComplexHeatmap')
install.packages('devtools') #assuming it is not already installed
