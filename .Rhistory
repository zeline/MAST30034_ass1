for (k in 1:(x1*x2)) {
A<= Ao+step*(t(TC)%*%(X[,k]=(TC%*%Ao)))
A <= (1/(1+thr))*(sign(A)*pmax(replicate(nsrcs ,0), abs(A) =thr))
for ( i in 1:10)
{
}
Alr [ , k]<=A } '''
#X = standardized generated dataset
AV = [0, 20, 0, 0, 0, 0]
#X = standardized generated dataset
AV = c(0, 20, 0, 0, 0, 0)
AV
typeof(AV)
IV = c(30, 45, 60, 40, 40, 40)
DUR_ONES = c(15, 20, 25, 15, 20, 25)
AV:IV:N-20
TC = matrix(AV:IV:N-20)
TC
TC = matrix(AV:IV:N-20, nrow = 240, ncol = 6)
TC
matrix(AV[2]:IV[2]:N-20, nrow = 240, ncol = 6)
AV
AV[2]
IV[2]
AV[2]:IV[2]
len(AV[2]:IV[2])
length(AV[2]:IV[2])
length(AV[2]:IV[2]:220)
matrix(AV[2]:IV[2]:N-20, nrow = 240, ncol = 6)
length(AV[2]:IV[2]:1)
AV[2]:IV[2]:1
AV[2]:IV[2]:40
AV[2]:IV[2]:49
AV[2]:IV[2]
length(AV[2]:IV[2])
AV[3]:IV[3]
TC1 = matrix(AV[1]:IV[1]:N-20, nrow = 240, ncol = 6)
TC2 = matrix(AV[2]:IV[2]:N-20, nrow = 240, ncol = 6)
TC3 = matrix(AV[3]:IV[3]:N-20, nrow = 240, ncol = 6)
TC4 = matrix(AV[4]:IV[4]:N-20, nrow = 240, ncol = 6)
TC5 = matrix(AV[5]:IV[5]:N-20, nrow = 240, ncol = 6)
TC6 = matrix(AV[6]:IV[6]:N-20, nrow = 240, ncol = 6)
TC2
TC1
c(1*15)
c(1::15)
c(1:1:15)
rep(1, 5)
c(DUR_ONES[1], AV[1]:IV[1]:N-20)
c(DUR_ONES[1] + AV[1]:IV[1]:N-20)
seq(1:DUR_ONES[1])
seq(1:1:DUR_ONES[1])
seq(1,1, DUR_ONES[1])
seq(1:1, DUR_ONES[1])
rep(1, DUR_ONES[1])
c(seq(1:DUR_ONES[1]), AV[1]:IV[1]:N-20)
c(rep(1, DUR_ONES[1]), AV[1]:IV[1]:N-20)
TC1 = matrix(c(rep(1, DUR_ONES[1]), AV[1]:IV[1]:N-20), nrow = 240, ncol = 6)
TC2 = matrix(c(rep(2, DUR_ONES[2]),AV[2]:IV[2]:N-20), nrow = 240, ncol = 6)
TC3 = matrix(c(rep(3, DUR_ONES[3]),AV[3]:IV[3]:N-20), nrow = 240, ncol = 6)
TC4 = matrix(c(rep(4, DUR_ONES[4]),AV[4]:IV[4]:N-20), nrow = 240, ncol = 6)
TC5 = matrix(c(rep(5, DUR_ONES[5]),AV[5]:IV[5]:N-20), nrow = 240, ncol = 6)
TC6 = matrix(c(rep(6, DUR_ONES[6]),AV[6]:IV[6]:N-20), nrow = 240, ncol = 6)
TC2
TC1 = matrix(c(rep(1, DUR_ONES[1]), AV[1]:IV[1]:N-20), nrow = 240, ncol = 6)
TC2 = matrix(c(rep(1, DUR_ONES[2]),AV[2]:IV[2]:N-20), nrow = 240, ncol = 6)
TC3 = matrix(c(rep(1, DUR_ONES[3]),AV[3]:IV[3]:N-20), nrow = 240, ncol = 6)
TC4 = matrix(c(rep(1, DUR_ONES[4]),AV[4]:IV[4]:N-20), nrow = 240, ncol = 6)
TC5 = matrix(c(rep(1, DUR_ONES[5]),AV[5]:IV[5]:N-20), nrow = 240, ncol = 6)
TC6 = matrix(c(rep(1, DUR_ONES[6]),AV[6]:IV[6]:N-20), nrow = 240, ncol = 6)
TC2
TC1 = matrix(c(rep(1, DUR_ONES[1]), AV[1]:IV[1]:N-20), nrow = 240, ncol = 6, bycol = TRUE)
TC1 = matrix(c(rep(1, DUR_ONES[1]), AV[1]:IV[1]:N-20), nrow = 240, ncol = 6, byrow = FALSE)
TC1
AV[1]:IV[1]:N-20
c(rep(1, DUR_ONES[1]), AV[1]:IV[1]:N-20
c(rep(1, DUR_ONES[1]), AV[1]:IV[1]:N-20)
(rep(1, DUR_ONES[1]), AV[1]:IV[1]:N-20)
c(rep(1, DUR_ONES[1]), AV[1]:IV[1]:N-20)
TC1 = matrix(c(rep(1, DUR_ONES[1]), AV[1]:IV[1]:N-20), nrow = 240, ncol = 6, byrow = FALSE)
TC2 = matrix(c(rep(1, DUR_ONES[2]),AV[2]:IV[2]:N-20), nrow = 240, ncol = 6, byrow = FALSE)
TC3 = matrix(c(rep(1, DUR_ONES[3]),AV[3]:IV[3]:N-20), nrow = 240, ncol = 6, byrow = FALSE)
TC4 = matrix(c(rep(1, DUR_ONES[4]),AV[4]:IV[4]:N-20), nrow = 240, ncol = 6, byrow = FALSE)
TC5 = matrix(c(rep(1, DUR_ONES[5]),AV[5]:IV[5]:N-20), nrow = 240, ncol = 6, byrow = FALSE)
TC6 = matrix(c(rep(1, DUR_ONES[6]),AV[6]:IV[6]:N-20), nrow = 240, ncol = 6, byrow = FALSE)
TC1
c(rep(NULL, 2), rep(1, 5))
c(rep(NA, 2), rep(1, 5))
DUR_ZERO = IV - DUR_ONES
DUR_ZERO
DUR_NEG = IV - DUR_ONES
DUR_NEG
c(rep(NA, AV[1]), rep(1, DUR_ONES[1]), rep(-1, DUR_NEG[1]))
c(rep(NA, AV[2]), rep(1, DUR_ONES[1]), rep(-1, DUR_NEG[1]))
c(rep(NA, AV[1]), rep(1, DUR_ONES[1]), rep(-1, DUR_NEG[1]))
c(rep(NA, AV[1]), rep(1, DUR_ONES[1]), rep(-1, DUR_NEG[1]))
length(c(rep(NA, AV[1]), rep(1, DUR_ONES[1]), rep(-1, DUR_NEG[1])))
n = length(start + period)
start = c(rep(NA, AV[1]))
period = c(rep(1, DUR_ONES[1]), rep(-1, DUR_NEG[1]))
n = length(start + period)
n
start + period
n = length(c(start, period))
n
branch = c(period, N-n)
branch
branch = rep(period, N-n)
branch
N
N-n
branch = rep_len(period, N-n)
branch
c(start, branch)
length(c(start, branch))
length(c(start, period, branch))
tc1 <- c()
tc1 = c(start, period, branch)
TC_gen <- function(x){
# create an empty vector
tc <- c()
for(i in 1:6){
start = c(rep(NA, AV[i]))
period = c(rep(1, DUR_ONES[i]), rep(-1, DUR_NEG[i]))
n = length(c(start, period))
branch = rep_len(period, N-n)
tc[i] = c(start, period, branch)
}
return(tc)
}
TC <- matrix(, nrow = 240, ncol = 6)
tc
TC[1:length(vector), i] = vec
for(i in 1:6){
start = c(rep(NA, AV[i]))
period = c(rep(1, DUR_ONES[i]), rep(-1, DUR_NEG[i]))
n = length(c(start, period))
branch = rep_len(period, N-n)
vec = c(start, period, branch)
TC[1:length(vector), i] = vec
}
TC
TC[,1]
for(i in 1:6){
start = c(rep(NA, AV[i]))
period = c(rep(1, DUR_ONES[i]), rep(-1, DUR_NEG[i]))
n = length(c(start, period))
branch = rep_len(period, N-n)
vec = c(start, period, branch)
TC[1:length(vector), i] <- vec
}
TC <- matrix(data = NA, nrow = 240, ncol = 6)
for(i in 1:6){
start = c(rep(NA, AV[i]))
period = c(rep(1, DUR_ONES[i]), rep(-1, DUR_NEG[i]))
n = length(c(start, period))
branch = rep_len(period, N-n)
vec = c(start, period, branch)
TC[1:length(vector), i] <- vec
}
TC[,1]
tc1
TC[,1] <- tc1
TC
#col 2
start = c(rep(NA, AV[2]))
period = c(rep(1, DUR_ONES[2]), rep(-1, DUR_NEG[2]))
n = length(c(start, period))
branch = rep_len(period, N-n)
tc2 = c(start, period, branch)
TC[,2] <- tc2
TC
TC <- matrix(data = NA, nrow = 240, ncol = 6)
for(i in 1:6){
start = c(rep(NA, AV[i]))
period = c(rep(1, DUR_ONES[i]), rep(-1, DUR_NEG[i]))
n = length(c(start, period))
branch = rep_len(period, N-n)
vec = c(start, period, branch)
TC[, i] <- vec
}
TC
?matplot
TC[,1]
matplot(TC[,1])
matplot(TC[,1], type = 'l')
matplot(TC[,1], type = 'l', xlab = 'Time', title = 'Time Course 1')
matplot(TC[,1], type = 'l', xlab = 'Time', ylab = 'Time Course 1')
?scale
scaled_TC = scale(TC, center = TRUE, scale = TRUE)
scaled_TC
mean(scaled_TC[,3])
#now we need to standardise each column
scaled_TC <- matrix(data = NA, nrow = 240, ncol = 6)
for(i in 1:6){
scaled_col = (TC[,i] - mean(TC[,i])) / sd(TC[,i])
scaled_TC[,i] = scaled_col
}
scaled_TC
?mean
#now we need to standardise each column
scaled_TC <- matrix(data = NA, nrow = 240, ncol = 6)
for(i in 1:6){
scaled_col = (TC[,i] - mean(TC[,i], na.rm = TRUE)) / sd(TC[,i], na.rm = TRUE)
scaled_TC[,i] = scaled_col
}
scaled_TC
mean(scaled_TC)
?apply
applt(scaled_TC, 2, mean)
apply(scaled_TC, 2, mean)
apply(scaled_TC, 2, mean(na.rm = TRUE))
apply(scaled_TC, 2, mean, na.rm=TRUE)
apply(scaled_TC, 2, sd, na.rm=TRUE)
matplot(scaled_TC[,1], type = 'l', xlab = 'Time', ylab = 'Time Course 1')
#now we make the subplots
scaled_TC
matplot(scaled_TC[,2], type = 'l', xlab = 'Time', ylab = 'Time Course 1')
?ggplot
??ggplot
?par
par(mfrow=c(2,3))
matplot(scaled_TC[,1], type = 'l', xlab = 'Time', ylab = 'Time Course 1')
matplot(scaled_TC[,2], type = 'l', xlab = 'Time', ylab = 'Time Course 2')
matplot(scaled_TC[,3], type = 'l', xlab = 'Time', ylab = 'Time Course 3')
matplot(scaled_TC[,4], type = 'l', xlab = 'Time', ylab = 'Time Course 4')
matplot(scaled_TC[,5], type = 'l', xlab = 'Time', ylab = 'Time Course 5')
matplot(scaled_TC[,6], type = 'l', xlab = 'Time', ylab = 'Time Course 6')
par(mfrow=c(3,2))
matplot(scaled_TC[,1], type = 'l', xlab = 'Time', ylab = 'Time Course 1')
matplot(scaled_TC[,2], type = 'l', xlab = 'Time', ylab = 'Time Course 2')
matplot(scaled_TC[,3], type = 'l', xlab = 'Time', ylab = 'Time Course 3')
matplot(scaled_TC[,4], type = 'l', xlab = 'Time', ylab = 'Time Course 4')
matplot(scaled_TC[,5], type = 'l', xlab = 'Time', ylab = 'Time Course 5')
matplot(scaled_TC[,6], type = 'l', xlab = 'Time', ylab = 'Time Course 6')
matplot(TC[,1], type = 'l', xlab = 'Time', main = 'Time Course 1')
par(mfrow=c(2,3))
matplot(scaled_TC[,1], type = 'l', xlab = 'Time', main = 'Time Course 1')
matplot(scaled_TC[,2], type = 'l', xlab = 'Time', main = 'Time Course 2')
matplot(scaled_TC[,3], type = 'l', xlab = 'Time', main = 'Time Course 3')
matplot(scaled_TC[,4], type = 'l', xlab = 'Time', main = 'Time Course 4')
matplot(scaled_TC[,5], type = 'l', xlab = 'Time', main = 'Time Course 5')
matplot(scaled_TC[,6], type = 'l', xlab = 'Time', main = 'Time Course 6')
par(mfrow=c(2,3))
matplot(scaled_TC[,1], type = 'l', xlab = 'Time', ylab = 'Source Value',
main = 'Time Course 1')
matplot(scaled_TC[,2], type = 'l', xlab = 'Time', ylab = 'Source Value',
main = 'Time Course 2')
matplot(scaled_TC[,3], type = 'l', xlab = 'Time', ylab = 'Source Value',
main = 'Time Course 3')
matplot(scaled_TC[,4], type = 'l', xlab = 'Time', ylab = 'Source Value',
main = 'Time Course 4')
matplot(scaled_TC[,5], type = 'l', xlab = 'Time', ylab = 'Source Value',
main = 'Time Course 5')
matplot(scaled_TC[,6], type = 'l', xlab = 'Time', ylab = 'Source Value',
main = 'Time Course 6')
par(mfrow=c(3,2))
matplot(scaled_TC[,1], type = 'l', xlab = 'Time', ylab = 'Source Value',
main = 'Time Course 1')
matplot(scaled_TC[,2], type = 'l', xlab = 'Time', ylab = 'Source Value',
main = 'Time Course 2')
matplot(scaled_TC[,3], type = 'l', xlab = 'Time', ylab = 'Source Value',
main = 'Time Course 3')
matplot(scaled_TC[,4], type = 'l', xlab = 'Time', ylab = 'Source Value',
main = 'Time Course 4')
matplot(scaled_TC[,5], type = 'l', xlab = 'Time', ylab = 'Source Value',
main = 'Time Course 5')
matplot(scaled_TC[,6], type = 'l', xlab = 'Time', ylab = 'Source Value',
main = 'Time Course 6')
#1.2
TC
#1.2
rcorr(scaled_TC, type= c('pearson', 'spearman') )
#1.2
install.packages("Hmisc")
library(Hmisc)
#1.2
rcorr(scaled_TC, type= c('pearson', 'spearman') )
cor(scaled_TC, method = 'pearson')
cor(scaled_TC, method = 'pearson', na.rm = TRUE)
#1.2
rcorr(scaled_TC, type= c('pearson', 'spearman'))$r
install corrplot()
?corrplot
install corrplot
install.packages('corrplot')
library(corrplot)
#1.2
rcorr(scaled_TC, type= 'spearman')$r
#1.2
corr_matrix = rcorr(scaled_TC, type= 'spearman')$r
colour = colorRampPalette(c('yellow', 'orange', 'red'))(20)
heatmap(x = corr_matrix, col = colour, symm = TRUE)
colour = colorRampPalette(c('red', 'orange', 'yellow'))(20)
heatmap(x = corr_matrix, col = colour, symm = TRUE)
colour = colorRampPalette(c('red', 'orange', 'yellow'))(40)
heatmap(x = corr_matrix, col = colour, symm = TRUE)
#using spearman as the values are not normally distributed
corr_matrix
?colorRampPalette
heatmap(x = corr_matrix, col = colour, symm = TRUE, main = 'Correlation Between
TC Vectors')
legend(x="topright", legend=c("min", "ave", "max"),
fill=colorRampPalette(brewer.pal(8, "Oranges"))(3))
legend(x="topright", col_fun = colour)
heatmap(x = corr_matrix, col = colour, symm = TRUE, main = 'Correlation Between
TC Vectors')
Legend(x="topright", col_fun = colour)
library(circlize)
intall circlize
intall.packages('circlize')
install.packages('circlize')
colour = colorRampPalette(c('red', 'orange', 'yellow'))(40)
heatmap(x = corr_matrix, col = colour, symm = TRUE, main = 'Correlation Between
TC Vectors')
Legend(x="topright", col_fun = colour)
library(circlize)
colour = colorRampPalette(c('red', 'orange', 'yellow'))(40)
heatmap(x = corr_matrix, col = colour, symm = TRUE, main = 'Correlation Between
TC Vectors')
Legend(x="topright", col_fun = colour)
col_fun = colorRamp2(c(-1, 0, 1), c("green", "yellow", "red"))
heatmap(x = corr_matrix, col = col_fun, symm = TRUE, main = 'Correlation Between
TC Vectors')
heatmap(x = corr_matrix, col = colour, symm = TRUE, main = 'Correlation Between
TC Vectors')
install ComplexHeatmap
install.packages('ComplexHeatmap')
#using spearman as the values are not normally distributed
corr_matrix
colour = colorRampPalette(c('purple', 'red', 'orange', 'yellow'))(40)
heatmap(x = corr_matrix, col = colour, symm = TRUE, main = 'Correlation Between
TC Vectors')
colour = colorRampPalette(c('purple', 'red', 'orange', 'yellow'))(80)
heatmap(x = corr_matrix, col = colour, symm = TRUE, main = 'Correlation Between
TC Vectors')
colour = colorRampPalette(c('red', 'orange', 'yellow'))(80)
heatmap(x = corr_matrix, col = colour, symm = TRUE, main = 'Correlation Between
TC Vectors')
legend(x = "bottomright", legend = c("low", "medium", "high"),
cex = 0.8, fill = colour)
?legend
heatmap(x = corr_matrix, col = colour, symm = TRUE, main = 'Correlation Between
TC Vectors')
legend(x = "bottomright", legend = c("low", "medium", "high"),
cex = 0.8, fill = colour(3))
colour = colorRampPalette(c('red', 'orange', 'yellow'))(80)
heatmap(x = corr_matrix, col = colour, symm = TRUE, main = 'Correlation Between
TC Vectors')
legend(x = "bottomright", legend = c("low", "medium", "high"),
cex = 0.8, fill = colour(3))
cex = 0.8, fill = colour
legend(x = "bottomright", legend = c("low", "medium", "high"),
fill = colour)
colour
# Function to plot color bar
color.bar <- function(lut, min, max=-min, nticks=11, ticks=seq(min, max, len=nticks), title='') {
scale = (length(lut)-1)/(max-min)
dev.new(width=1.75, height=5)
plot(c(0,10), c(min,max), type='n', bty='n', xaxt='n', xlab='', yaxt='n', ylab='', main=title)
axis(2, ticks, las=1)
for (i in 1:(length(lut)-1)) {
y = (i-1)/scale + min
rect(0,y,10,y+1/scale, col=lut[i], border=NA)
}
}
color.bar(colorRampPalette(c("light green", "yellow", "orange", "red"))(100), -1)
colour = colorRampPalette(c("light green", "yellow", "orange", "red"))(100)
heatmap = heatmap(x = corr_matrix, col = colour, symm = TRUE, main = 'Correlation Between
TC Vectors')
heatmap = heatmap(x = corr_matrix, col = colour, symm = TRUE, main = 'Correlation Between
TC Vectors', Colv = NA, Rowv = NA)
#using spearman as the values are not normally distributed
min(corr_matrix)
max(corr_matrix)
#since the heatmap will be from [-0.07, 1], there isnt any strong negative
#correlation so I will focus on only displaying the strong positive correlations
colour = colorRampPalette(c("pink", "orange", "yellow"))(100)
heatmap = heatmap(x = corr_matrix, col = colour, symm = TRUE, main = 'Correlation Between
TC Vectors', Colv = NA, Rowv = NA)
#since the heatmap will be from [-0.07, 1], there isnt any strong negative
#correlation so I will focus on only displaying the strong positive correlations
colour = colorRampPalette(c("magenta", "orange", "yellow"))(100)
heatmap = heatmap(x = corr_matrix, col = colour, symm = TRUE, main = 'Correlation Between
TC Vectors', Colv = NA, Rowv = NA)
#since the heatmap will be from [-0.07, 1], there isnt any strong negative
#correlation so I will focus on only displaying the strong positive correlations
colour = colorRampPalette(c("peach", "orange", "yellow"))(100)
#since the heatmap will be from [-0.07, 1], there isnt any strong negative
#correlation so I will focus on only displaying the strong positive correlations
colour = colorRampPalette(c("blue", "green", "yellow"))(100)
heatmap = heatmap(x = corr_matrix, col = colour, symm = TRUE, main = 'Correlation Between
TC Vectors', Colv = NA, Rowv = NA)
#since the heatmap will be from [-0.07, 1], there isnt any strong negative
#correlation so I will focus on only displaying the strong positive correlations
colour = colorRampPalette(c("lightblue", "green", "yellow"))(100)
heatmap = heatmap(x = corr_matrix, col = colour, symm = TRUE, main = 'Correlation Between
TC Vectors', Colv = NA, Rowv = NA)
#since the heatmap will be from [-0.07, 1], there isnt any strong negative
#correlation so I will focus on only displaying the strong positive correlations
colour = colorRampPalette(c("lightblue", "lime", "yellow"))(100)
heatmap = heatmap(x = corr_matrix, col = colour, symm = TRUE, main = 'Correlation Between
TC Vectors', Colv = NA, Rowv = NA)
#since the heatmap will be from [-0.07, 1], there isnt any strong negative
#correlation so I will focus on only displaying the strong positive correlations
colour = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(100)
heatmap = heatmap(x = corr_matrix, col = colour, symm = TRUE, main = 'Correlation Between
TC Vectors', Colv = NA, Rowv = NA)
colour
legend(x = "bottomright", legend = c("low", "medium", "high"),
fill = colour)
#since the heatmap will be from [-0.07, 1], there isnt any strong negative
#correlation so I will focus on only displaying the strong positive correlations
colour = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(100)
heatmap = heatmap(x = corr_matrix, col = colour, symm = TRUE,
main = 'Correlation Between TC Vectors', Colv = NA, Rowv = NA)
legend(x = "bottomright", legend = c("low", "medium", "high"),
fill = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(100))
colour(3)
#since the heatmap will be from [-0.07, 1], there isnt any strong negative
#correlation so I will focus on only displaying the strong positive correlations
colour = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(3)
heatmap = heatmap(x = corr_matrix, col = colour, symm = TRUE,
main = 'Correlation Between TC Vectors', Colv = NA, Rowv = NA)
legend(x = "bottomright", legend = c("low", "medium", "high"),
fill = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(3))
#since the heatmap will be from [-0.07, 1], there isnt any strong negative
#correlation so I will focus on only displaying the strong positive correlations
colour = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(20)
heatmap = heatmap(x = corr_matrix, col = colour, symm = TRUE,
main = 'Correlation Between TC Vectors', Colv = NA, Rowv = NA)
legend(x = "bottomright", legend = c("low", "medium", "high"),
fill = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(20))
#since the heatmap will be from [-0.07, 1], there isnt any strong negative
#correlation so I will focus on only displaying the strong positive correlations
colour = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(10)
heatmap = heatmap(x = corr_matrix, col = colour, symm = TRUE,
main = 'Correlation Between TC Vectors', Colv = NA, Rowv = NA)
legend(x = "bottomright", legend = c("low", "medium", "high"),
fill = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(10))
colorRampPalette(c("lightblue", "lightgreen", "yellow"))(10)
#since the heatmap will be from [-0.07, 1], there isnt any strong negative
#correlation so I will focus on only displaying the strong positive correlations
colour = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(10)
heatmap = heatmap(x = corr_matrix, col = colour, symm = TRUE,
main = 'Correlation Between TC Vectors', Colv = NA, Rowv = NA)
legend(x = "bottomright", legend = c("low", "medium", "high"),
fill = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(3))
legend(x = "bottomright", legend = c("0.0", "0.6", "1.0"),
fill = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(3))
#since the heatmap will be from [-0.07, 1], there isnt any strong negative
#correlation so I will focus on only displaying the strong positive correlations
colour = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(10)
heatmap = heatmap(x = corr_matrix, col = colour, symm = TRUE,
main = 'Correlation Between TC Vectors', Colv = NA, Rowv = NA)
legend(x = "bottomright", legend = c("0.0", "0.6", "1.0"),
fill = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(3))
?legend
#since the heatmap will be from [-0.07, 1], there isnt any strong negative
#correlation so I will focus on only displaying the strong positive correlations
colour = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(20)
heatmap = heatmap(x = corr_matrix, col = colour, symm = TRUE,
main = 'Correlation Between TC Vectors', Colv = NA, Rowv = NA)
legend(x = "bottomright", legend = c("0.0", "0.6", "1.0"),
fill = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(3))
#since the heatmap will be from [-0.07, 1], there isnt any strong negative
#correlation so I will focus on only displaying the strong positive correlations
colour = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(10)
heatmap = heatmap(x = corr_matrix, col = colour, symm = TRUE,
main = 'Correlation Between TC Vectors', Colv = NA, Rowv = NA)
legend(x = "bottomright", legend = c("0.0", "0.6", "1.0"),
fill = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(3))
heatmap = heatmap(x = corr_matrix, col = colour, symm = TRUE,
main = 'Correlation Between TC Vectors', Colv = NA, Rowv = NA)
legend(title = 'Scale for Heatplot', x = "bottomright",
legend = c("0.0", "0.6", "1.0"),
fill = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(3) )
heatmap = heatmap(x = corr_matrix, col = colour, symm = TRUE,
main = 'Correlation Between TC Vectors', Colv = NA, Rowv = NA)
legend(title = 'Scale for Heatplot', x = "right",
legend = c("0.0", "0.6", "1.0"),
fill = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(3) )
heatmap = heatmap(x = corr_matrix, col = colour, symm = TRUE,
main = 'Correlation Between TC Vectors', Colv = NA, Rowv = NA)
legend(x = "right",
legend = c("0.0", "0.6", "1.0"),
fill = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(3) )
legend(title = 'Scale',x = "right",
legend = c("0.0", "0.6", "1.0"),
fill = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(3) )
legend(title = 'Scale',x = "bottom",
legend = c("0.0", "0.6", "1.0"),
fill = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(3) )
heatmap = heatmap(x = corr_matrix, col = colour, symm = TRUE,
main = 'Correlation Between TC Vectors', Colv = NA, Rowv = NA)
legend(title = 'Scale',x = "right",
legend = c("0.0", "0.6", "1.0"),
fill = colorRampPalette(c("lightblue", "lightgreen", "yellow"))(3) )
write.csv(scaled_TC, 'scaled_TC.csv')
#exporting the matrix
#write.csv(scaled_TC, 'scaled_TC.csv')
?write.csv
#exporting the matrix
write.csv(scaled_TC, "scaled_TC.csv")
#exporting the matrix
write.csv(scaled_TC, file = "scaled_TC.csv")
#exporting the matrix
write.csv(scaled_TC, file = "~/plots/scaled_TC.csv")
setwd("~/Documents/spark/MAST30034_ass1")
#exporting the matrix
write.csv(scaled_TC, file = "~/data/scaled_TC.csv")
setwd("~/Documents/spark/MAST30034_ass1")
